{"ast":null,"code":"var _jsxFileName = \"/home/tofusupreme/code/TofuSupreme/react-weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Search from \"./components/search/search\";\nimport CurrentWeather from './components/current-weather/current-weather';\nimport Forecast from './components/forecast/forecast';\nimport { WEATHER_API_URL, WEATHER_API_KEY } from './api';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [currentForecast, setForecast] = useState(null);\n\n  const handleOnSearchChange = searchData => {\n    const [lat, lon] = searchData.value.split(\" \");\n    const currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    const forecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    Promise.all([currentWeatherFetch, forecastFetch]).then(async response => {\n      const weatherResponse = await response[0].json();\n      const forecastResponse = await response[1].json();\n      setCurrentWeather({\n        city: searchData.label,\n        ...weatherResponse\n      });\n      setForecast({\n        city: searchData.label,\n        ...forecastResponse\n      });\n    }).catch(err => console.log(err));\n  };\n\n  console.log(currentWeather);\n  console.log(currentForecast);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearchChange: handleOnSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n      data: currentWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 26\n    }, this), currentForecast && /*#__PURE__*/_jsxDEV(Forecast, {\n      data: currentForecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 1\n  }, this);\n}\n\n_s(App, \"m+bU1OXztuv616z1znYH052L83Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Search","CurrentWeather","Forecast","WEATHER_API_URL","WEATHER_API_KEY","useState","App","currentWeather","setCurrentWeather","currentForecast","setForecast","handleOnSearchChange","searchData","lat","lon","value","split","currentWeatherFetch","fetch","forecastFetch","Promise","all","then","response","weatherResponse","json","forecastResponse","city","label","catch","err","console","log"],"sources":["/home/tofusupreme/code/TofuSupreme/react-weather-app/src/App.js"],"sourcesContent":["import './App.css';\nimport Search from \"./components/search/search\";\nimport CurrentWeather from './components/current-weather/current-weather';\nimport Forecast from './components/forecast/forecast';\nimport { WEATHER_API_URL, WEATHER_API_KEY } from './api';\nimport { useState } from 'react';\n\nfunction App() {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [currentForecast, setForecast] = useState(null);\n\n  const handleOnSearchChange = (searchData) => {\n    const [lat, lon] = searchData.value.split(\" \");\n\n    const currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n\n    const forecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n\n    Promise.all([currentWeatherFetch, forecastFetch])\n      .then(async (response) => {\n      const weatherResponse  = await response[0].json();\n      const forecastResponse = await response[1].json()\n\n        setCurrentWeather({city: searchData.label, ...weatherResponse});\n        setForecast({city: searchData.label, ...forecastResponse});\n    })\n      .catch((err) => console.log(err));\n  }\n  console.log(currentWeather);\n  console.log(currentForecast);\n\n  return (\n\n<div className=\"container\">\n      <Search onSearchChange={handleOnSearchChange} />\n      {currentWeather && <CurrentWeather data={currentWeather} />}\n      {currentForecast && <Forecast data={currentForecast} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,MAAP,MAAmB,4BAAnB;AACA,OAAOC,cAAP,MAA2B,8CAA3B;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,OAAjD;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCH,QAAQ,CAAC,IAAD,CAApD;EACA,MAAM,CAACI,eAAD,EAAkBC,WAAlB,IAAiCL,QAAQ,CAAC,IAAD,CAA/C;;EAEA,MAAMM,oBAAoB,GAAIC,UAAD,IAAgB;IAC3C,MAAM,CAACC,GAAD,EAAMC,GAAN,IAAaF,UAAU,CAACG,KAAX,CAAiBC,KAAjB,CAAuB,GAAvB,CAAnB;IAEA,MAAMC,mBAAmB,GAAGC,KAAK,CAAE,GAAEf,eAAgB,gBAAeU,GAAI,QAAOC,GAAI,UAASV,eAAgB,eAA3E,CAAjC;IAEA,MAAMe,aAAa,GAAGD,KAAK,CAAE,GAAEf,eAAgB,iBAAgBU,GAAI,QAAOC,GAAI,UAASV,eAAgB,eAA5E,CAA3B;IAEAgB,OAAO,CAACC,GAAR,CAAY,CAACJ,mBAAD,EAAsBE,aAAtB,CAAZ,EACGG,IADH,CACQ,MAAOC,QAAP,IAAoB;MAC1B,MAAMC,eAAe,GAAI,MAAMD,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,EAA/B;MACA,MAAMC,gBAAgB,GAAG,MAAMH,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,EAA/B;MAEEjB,iBAAiB,CAAC;QAACmB,IAAI,EAAEf,UAAU,CAACgB,KAAlB;QAAyB,GAAGJ;MAA5B,CAAD,CAAjB;MACAd,WAAW,CAAC;QAACiB,IAAI,EAAEf,UAAU,CAACgB,KAAlB;QAAyB,GAAGF;MAA5B,CAAD,CAAX;IACH,CAPD,EAQGG,KARH,CAQUC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CARlB;EASD,CAhBD;;EAiBAC,OAAO,CAACC,GAAR,CAAYzB,cAAZ;EACAwB,OAAO,CAACC,GAAR,CAAYvB,eAAZ;EAEA,oBAEF;IAAK,SAAS,EAAC,WAAf;IAAA,wBACM,QAAC,MAAD;MAAQ,cAAc,EAAEE;IAAxB;MAAA;MAAA;MAAA;IAAA,QADN,EAEOJ,cAAc,iBAAI,QAAC,cAAD;MAAgB,IAAI,EAAEA;IAAtB;MAAA;MAAA;MAAA;IAAA,QAFzB,EAGOE,eAAe,iBAAI,QAAC,QAAD;MAAU,IAAI,EAAEA;IAAhB;MAAA;MAAA;MAAA;IAAA,QAH1B;EAAA;IAAA;IAAA;IAAA;EAAA,QAFE;AAQD;;GAhCQH,G;;KAAAA,G;AAkCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}